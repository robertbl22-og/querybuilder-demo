{"version":3,"sources":["AwesomeQueryBuilder/config/signalFields.ts","AwesomeQueryBuilder/widgets/Signal.tsx","AwesomeQueryBuilder/config/widgets.tsx","AwesomeQueryBuilder/config/types.ts","AwesomeQueryBuilder/config/funcs.ts","AwesomeQueryBuilder/config/settings.tsx","AwesomeQueryBuilder/config/operators.ts","AwesomeQueryBuilder/config/index.ts","AwesomeQueryBuilder/config/conjunctions.ts","AwesomeQueryBuilder/data/init_logic.js","AwesomeQueryBuilder/data/exportSuppressionQuery.ts","AwesomeQueryBuilder/DemoQueryBuilder.tsx","App.tsx","serviceWorker.ts","theme.tsx","index.tsx"],"names":["signalFields","Domains","label","type","subfields","Names","operators","listValues","value","title","Groups","DateOfBirth","valueSources","Gender","HealthcareSurvey","tooltip","Signal","Attributors","RecordTypes","Seen","Days","preferWidgets","fieldSettings","min","SignalGroup","SignalCustom","SelectWidget","Widgets","props","handleChange","e","console","log","customProps","attributors","onChange","recordTypes","widgets","BasicConfig","text","validateValue","val","fieldDef","length","slider","width","rangeslider","date","dateFormat","valueFormat","time","timeFormat","datetime","func","showSearch","treeselect","signal","factory","types","boolean","merge","widgetProps","hideOperator","operatorInlineLabel","opProps","equal","not_equal","defaultOperator","funcs","LOWER","mongoFunc","jsonLogic","jsonLogicIsMethod","returnType","args","str","LINEAR_REGRESSION","formatFunc","_","coef","bias","sqlFormatFunc","mongoFormatFunc","$sum","$multiply","renderBrackets","renderSeps","defaultValue","FieldSelect","FieldDropdown","localeSettings","FieldCascader","FieldTreeSelect","VanillaFieldSelect","locale","short","full","antd","en_US","valueLabel","valuePlaceholder","fieldLabel","operatorLabel","funcLabel","fieldPlaceholder","funcPlaceholder","operatorPlaceholder","deleteLabel","undefined","addGroupLabel","addRuleLabel","delGroupLabel","notLabel","valueSourcesPopupTitle","removeRuleConfirmOptions","okText","okType","removeGroupConfirmOptions","settings","valueSourcesInfo","field","widget","maxNesting","canLeaveEmptyGroup","renderOperator","renderFunc","proximity","valueLabels","placeholder","textSeparators","options","optionLabel","optionTextBefore","optionPlaceholder","minProximity","maxProximity","defaults","between","config","conjunctions","fields","and","var","method","suppressionFormat","tree","formatNode","get","children","Map","size","map","currentChild","filter","initTree","stringify","JSON","queryBuilderFormat","Utils","jsonLogicFormat","queryString","mongodbFormat","sqlFormat","getTree","checkTree","loadTree","uuid","preStyle","loadFromJsonLogic","backgroundColor","margin","padding","borderRadius","overflow","preErrorStyle","TabPane","Tabs","emptyInitValue","id","initValue","loadedInitValue","Object","keys","loadedInitLogic","loadedConfig","DemoQueryBuilder","immutableTree","onConfigChanged","detail","_initTree","_initValue","setState","handleGenerateList","state","matchResults","logic","results","data","errors","exampleData","r","isMatch","apply","message","success","warn","resetValue","clearValue","updateResult","throttle","render","defaultActiveKey","tab","key","renderBuilder","className","style","textAlign","marginRight","marginTop","onClick","color","cursor","marginLeft","href","target","rel","FormattedTabs","dataSource","rowKey","columns","dataIndex","i","toString","Date","toLocaleDateString","window","addEventListener","this","removeEventListener","Component","App","Content","Boolean","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","ReactDOM","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fc9a9e90.chunk.js","sourcesContent":["import { Fields } from \"react-awesome-query-builder\"\n\nconst signalFields: Fields = {\n  Domains: {\n    label: \"Domains\",\n    type: \"!group\",\n    subfields: {\n      Names: {\n        label: \"Names\",\n        type: \"multiselect\",\n        // valueSources: [\"value\"],\n        operators: [\"multiselect_equals\"],\n        listValues: [\n          { value: \"yahoo.com\", title: \"yahoo.com\" },\n          { value: \"gmail.com\", title: \"gmail.com\" },\n          { value: \"aol.com\", title: \"aol.com\" },\n          { value: \"hotmail.com\", title: \"hotmail.com\" },\n          { value: \"outlook.com\", title: \"outlook.com\" },\n        ],\n      },\n      Groups: {\n        label: \"Groups\",\n        type: \"multiselect\",\n        // valueSources: [\"value\"],\n        operators: [\"multiselect_equals\"],\n        listValues: [\n          { value: \"Yahoo\", title: \"Yahoo\" },\n          { value: \"Gmail\", title: \"Gmail\" },\n          { value: \"AOL\", title: \"AOL\" },\n          { value: \"Hotmail\", title: \"Hotmail\" },\n          { value: \"Outlook\", title: \"Outlook\" },\n        ],\n      },\n    },\n  },\n  DateOfBirth: {\n    label: \"Date of Birth\",\n    type: \"date\",\n    valueSources: [\"value\"],\n    // fieldSettings: {\n    //   dateFormat: \"M-D-YYYY\",\n    // },\n  },\n  Gender: {\n    label: \"Gender\",\n    type: \"select\",\n    operators: [\"select_equals\"],\n    listValues: [\"Male\", \"Female\"],\n    // valueSources: [\"value\"],\n  },\n  HealthcareSurvey: {\n    label: \"Healthcare Survey\",\n    tooltip: \"Healthcare provider indicated in a survey\",\n    type: \"multiselect\",\n    operators: [\"multiselect_equals\"],\n    listValues: [\n      { value: \"NoInsurance\", title: \"No insurance\" },\n      { value: \"BCBS\", title: \"Blue Cross Blue Shield\" },\n      { value: \"UHC\", title: \"United Healthcare\" },\n      { value: \"Aetna\", title: \"Aetna\" },\n      { value: \"Other\", title: \"Other\" },\n    ],\n    // valueSources: [\"value\"],\n  },\n  Signal: {\n    label: \"Signal\",\n    tooltip: \"Indicators of user engagement\",\n    type: \"!group\",\n    subfields: {\n      Attributors: {\n        label: \"Attributors\",\n        tooltip: \"The source of the signal\",\n        type: \"multiselect\",\n        operators: [\"multiselect_equals\"],\n        listValues: [\"Onpoint\", \"XVerify\", \"EmailOversight\"],\n        // valueSources: [\"value\"],\n      },\n      RecordTypes: {\n        label: \"Record Types\",\n        tooltip: \"The type of signal\",\n        type: \"multiselect\",\n        operators: [\"multiselect_equals\"],\n        listValues: [\"Lead\", \"Verified\"],\n        // valueSources: [\"value\"],\n      },\n      Seen: {\n        label: \"Seen\",\n        type: \"!struct\",\n        subfields: {\n          Days: {\n            label: \"Days\",\n            type: \"number\",\n            preferWidgets: [\"number\"],\n            fieldSettings: {\n              min: 0,\n            },\n          },\n        },\n      },\n    },\n  },\n  SignalGroup: {\n    label: \"Signal Group\",\n    type: \"select\",\n    operators: [\"select_equals\"],\n    listValues: [\"Tier1 Suppression\", \"Tier2 Suppression\"],\n  },\n  SignalCustom: {\n    label: \"Signal (Custom)\",\n    type: \"signal\",\n    listValues: [\"Tier1 Suppression\", \"Tier2 Suppression\"],\n  }\n}\n\nexport default signalFields\n","import React from \"react\"\nimport { Widgets } from \"react-awesome-query-builder\"\n\nconst { SelectWidget } = Widgets\n\nconst Signal = (props: any) => {\n  const handleChange = (e: any) => {\n    console.log(e)\n  }\n\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td>Attributors:</td>\n          <td>\n            <SelectWidget\n              {...props}\n              {...props.customProps}\n              listValues={props.customProps.attributors}\n              onChange={handleChange}\n            />\n          </td>\n        </tr>\n        <tr>\n          <td>Record Types:</td>\n          <td>\n            <SelectWidget\n              {...props}\n              {...props.customProps}\n              listValues={props.customProps.recordTypes}\n              onChange={handleChange}\n            />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nexport default Signal\n","import React from \"react\"\nimport { BasicConfig, Widgets } from \"react-awesome-query-builder\"\nimport Signal from \"../widgets/Signal\"\n\nconst widgets: Widgets = {\n  ...BasicConfig.widgets,\n  // examples of  overriding\n  text: {\n    ...BasicConfig.widgets.text,\n    validateValue: (val, fieldDef) => {\n      return val.length < 10\n    },\n  },\n  slider: {\n    ...BasicConfig.widgets.slider,\n    customProps: {\n      width: \"300px\",\n    },\n  },\n  rangeslider: {\n    ...BasicConfig.widgets.rangeslider,\n    customProps: {\n      width: \"300px\",\n    },\n  },\n  date: {\n    ...BasicConfig.widgets.date,\n    dateFormat: \"DD.MM.YYYY\",\n    valueFormat: \"YYYY-MM-DD\",\n  },\n  time: {\n    ...BasicConfig.widgets.time,\n    timeFormat: \"HH:mm\",\n    valueFormat: \"HH:mm:ss\",\n  },\n  datetime: {\n    ...BasicConfig.widgets.datetime,\n    timeFormat: \"HH:mm\",\n    dateFormat: \"DD.MM.YYYY\",\n    valueFormat: \"YYYY-MM-DD HH:mm:ss\",\n  },\n  func: {\n    ...BasicConfig.widgets.func,\n    customProps: {\n      showSearch: true,\n    },\n  },\n  treeselect: {\n    ...BasicConfig.widgets.treeselect,\n    customProps: {\n      showSearch: true,\n    },\n  },\n  signal: {\n    ...BasicConfig.widgets.text,\n    factory: (props) => <Signal {...props} />,\n    customProps: {\n      attributors: [\"Onpoint\", \"XVerify\", \"EmailOversight\"],\n      recordTypes: [\"Lead\", \"Verified\"],\n    },\n  },\n}\n\nexport default widgets\n","import { BasicConfig, Types } from \"react-awesome-query-builder\"\nimport merge from \"lodash/merge\"\n\nconst types: Types = {\n  ...BasicConfig.types,\n  // examples of  overriding\n  boolean: merge(BasicConfig.types.boolean, {\n    widgets: {\n      boolean: {\n        widgetProps: {\n          hideOperator: true,\n          operatorInlineLabel: \"is\",\n        },\n        opProps: {\n          equal: {\n            label: \"is\",\n          },\n          // eslint-disable-next-line @typescript-eslint/camelcase\n          not_equal: {\n            label: \"is not\",\n          },\n        },\n      },\n    },\n  }),\n  signal: {\n    valueSources: ['value', 'field'],\n    defaultOperator: 'equal',\n    widgets: {\n      signal: {\n        operators: ['equal'],\n      }\n    }\n  }\n}\n\nexport default types\n","import { Funcs } from \"react-awesome-query-builder\"\n\nconst funcs: Funcs = {\n  LOWER: {\n    label: \"Lowercase\",\n    mongoFunc: \"$toLower\",\n    jsonLogic: \"toLowerCase\",\n    jsonLogicIsMethod: true,\n    returnType: \"text\",\n    args: {\n      str: {\n        label: \"String\",\n        type: \"text\",\n        valueSources: [\"value\", \"field\"],\n      },\n    },\n  },\n  LINEAR_REGRESSION: {\n    label: \"Linear regression\",\n    returnType: \"number\",\n    formatFunc: ({ coef, bias, val }, _) => `(${coef} * ${val} + ${bias})`,\n    sqlFormatFunc: ({ coef, bias, val }) => `(${coef} * ${val} + ${bias})`,\n    mongoFormatFunc: ({ coef, bias, val }) => ({ $sum: [{ $multiply: [coef, val] }, bias] }),\n    jsonLogic: ({ coef, bias, val }) => ({ \"+\": [{ \"*\": [coef, val] }, bias] }),\n    renderBrackets: [\"\", \"\"],\n    renderSeps: [\" * \", \" + \"],\n    args: {\n      coef: {\n        label: \"Coef\",\n        type: \"number\",\n        defaultValue: 1,\n        valueSources: [\"value\"],\n      },\n      val: {\n        label: \"Value\",\n        type: \"number\",\n        valueSources: [\"value\"],\n      },\n      bias: {\n        label: \"Bias\",\n        type: \"number\",\n        defaultValue: 0,\n        valueSources: [\"value\"],\n      },\n    },\n  },\n}\n\nexport default funcs\n","import { BasicConfig, LocaleSettings, Settings, Widgets } from \"react-awesome-query-builder\"\nimport React from \"react\"\n// eslint-disable-next-line @typescript-eslint/camelcase\nimport en_US from \"antd/lib/locale-provider/en_US\"\nconst { FieldSelect, FieldDropdown, FieldCascader, FieldTreeSelect, VanillaFieldSelect } = Widgets\n\nconst localeSettings: LocaleSettings = {\n  locale: {\n    short: \"en\",\n    full: \"en-US\",\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    antd: en_US,\n  },\n  valueLabel: \"Value\",\n  valuePlaceholder: \"Value\",\n  fieldLabel: \"Field\",\n  operatorLabel: \"Operator\",\n  funcLabel: \"Function\",\n  fieldPlaceholder: \"Select field\",\n  funcPlaceholder: \"Select function\",\n  operatorPlaceholder: \"Select operator\",\n  deleteLabel: undefined,\n  addGroupLabel: \"Add group\",\n  addRuleLabel: \"Add rule\",\n  delGroupLabel: undefined,\n  notLabel: \"Not\",\n  valueSourcesPopupTitle: \"Select value source\",\n  removeRuleConfirmOptions: {\n    title: \"Are you sure delete this rule?\",\n    okText: \"Yes\",\n    okType: \"danger\",\n  },\n  removeGroupConfirmOptions: {\n    title: \"Are you sure delete this group?\",\n    okText: \"Yes\",\n    okType: \"danger\",\n  },\n}\n\nconst settings: Settings = {\n  ...BasicConfig.settings,\n  ...localeSettings,\n\n  valueSourcesInfo: {\n    value: {\n      label: \"Value\",\n    },\n    field: {\n      label: \"Field\",\n      widget: \"field\",\n    },\n    func: {\n      label: \"Function\",\n      widget: \"func\",\n    },\n  },\n  // canReorder: true,\n  // canRegroup: true,\n  // showNot: true,\n  // showLabels: true,\n  maxNesting: 3,\n  canLeaveEmptyGroup: true, //after deletion\n\n  // renderField: (props) => <FieldCascader {...props} />,\n  //@ts-ignore\n  renderOperator: (props) => <FieldDropdown {...props} />,\n  //@ts-ignore\n  renderFunc: (props) => <FieldSelect {...props} />,\n}\n\nexport default settings\n","import { BasicConfig, OperatorProximity, Operators } from \"react-awesome-query-builder\"\n\nconst proximity: OperatorProximity = {\n  ...BasicConfig.operators.proximity,\n  valueLabels: [\n    { label: \"Word 1\", placeholder: \"Enter first word\" },\n    { label: \"Word 2\", placeholder: \"Enter second word\" },\n  ],\n  textSeparators: [\n    //'Word 1',\n    //'Word 2'\n  ],\n  options: {\n    ...BasicConfig.operators.proximity.options,\n    optionLabel: \"Near\", // label on top of \"near\" selectbox (for config.settings.showLabels==true)\n    optionTextBefore: \"Near\", // label before \"near\" selectbox (for config.settings.showLabels==false)\n    optionPlaceholder: \"Select words between\", // placeholder for \"near\" selectbox\n    minProximity: 2,\n    maxProximity: 10,\n    defaults: {\n      proximity: 2,\n    },\n    customProps: {},\n  },\n}\n\nconst operators: Operators = {\n  ...BasicConfig.operators,\n  // examples of  overriding\n  between: {\n    ...BasicConfig.operators.between,\n    valueLabels: [\"Value from\", \"Value to\"],\n    textSeparators: [\"from\", \"to\"],\n  },\n  proximity,\n}\n\nexport default operators\n","// eslint-disable-next-line @typescript-eslint/camelcase\nimport { Config } from \"react-awesome-query-builder\"\nimport signalFields from \"./signalFields\"\nimport widgets from \"./widgets\"\nimport types from \"./types\"\nimport funcs from \"./funcs\"\nimport settings from \"./settings\"\nimport operators from \"./operators\"\nimport conjunctions from \"./conjunctions\"\n\nconst config: Config = {\n  conjunctions,\n  operators,\n  widgets,\n  types,\n  settings,\n  fields: signalFields,\n  funcs,\n}\n\nexport default config\n","import { BasicConfig, Conjunctions } from \"react-awesome-query-builder\"\n\nconst conjunctions: Conjunctions = {\n  ...BasicConfig.conjunctions,\n}\n\nexport default conjunctions\n","export default {\n  and: [\n    {\n      \"==\": [\n        {\n          var: \"user.login\",\n        },\n        {\n          method: [\n            {\n              var: \"user.firstName\",\n            },\n            \"toLowerCase\",\n          ],\n        },\n      ],\n    },\n    {\n      \"==\": [\n        {\n          var: \"stock\",\n        },\n        false,\n      ],\n    },\n    {\n      \"==\": [\n        {\n          var: \"slider\",\n        },\n        35,\n      ],\n    },\n  ],\n}\n","import { Config, ImmutableTree } from \"react-awesome-query-builder\"\nimport { forOwn } from \"lodash\"\nimport { Map } from \"immutable\";\n\nexport function suppressionFormat(tree: ImmutableTree, config: Config): Record<string, any> {\n  const formatted = formatNode(tree, config)\n  return {\n    \"Expression\": formatted\n  }\n}\n\nfunction formatNode(tree: ImmutableTree, config: Config): Record<string, any> {\n  if (!tree) return {};\n  const type = tree.get('type');\n  // @ts-ignore\n  const properties = tree.get('properties') || new Map();\n  const children = tree.get('children1') as ImmutableTree;\n\n  if ((type === 'group' || type === 'rule_group') && children && children.size) {\n    const list = children\n      // @ts-ignore\n      .map((currentChild: ImmutableTree) => formatNode(currentChild, config, {}))\n      .filter((currentChild: any) => typeof currentChild !== 'undefined');\n    // forOwn(tree, function (value, key: string) {\n    //   // @ts-ignore\n    //   out[key] = `Transformed value: ${value}`\n    // })\n    return list\n  }\n  return {}\n}","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { Component } from \"react\"\nimport {\n  Query,\n  Builder,\n  BasicConfig,\n  Utils,\n  //types:\n  ImmutableTree,\n  Config,\n  BuilderProps,\n  JsonTree,\n  JsonLogicTree,\n} from \"react-awesome-query-builder\"\nimport { Button, Popconfirm, Tabs, Typography, Table, message } from \"antd\"\nimport throttle from \"lodash/throttle\"\nimport loadedConfig from \"./config/index\"\nimport loadedInitValue from \"./data/exampleQuery.json\"\nimport loadedInitLogic from \"./data/init_logic\"\nimport \"antd/dist/antd.css\"\nimport \"react-awesome-query-builder/css/styles.scss\"\nimport \"react-awesome-query-builder/css/compact_styles.scss\"\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\nimport jsonLogic from \"json-logic-js\"\nimport exampleData from \"./data/exampleData.json\"\nimport { suppressionFormat } from \"./data/exportSuppressionQuery\";\n\nconst stringify = JSON.stringify\nconst {\n  queryBuilderFormat,\n  jsonLogicFormat,\n  queryString,\n  mongodbFormat,\n  sqlFormat,\n  getTree,\n  checkTree,\n  loadTree,\n  uuid,\n  loadFromJsonLogic,\n} = Utils\nconst preStyle = {\n  backgroundColor: \"#E0E0E0\",\n  margin: \"10px\",\n  padding: \"10px\",\n  borderRadius: 5,\n  overflow: \"scroll\",\n}\nconst preErrorStyle = {\n  backgroundColor: \"lightpink\",\n  margin: \"10px\",\n  padding: \"10px\",\n  borderRadius: 5,\n}\nconst { TabPane } = Tabs\n\nconst emptyInitValue: JsonTree = { id: uuid(), type: \"group\" }\n\nlet initValue: JsonTree =\n  loadedInitValue && Object.keys(loadedInitValue).length > 0\n    ? (loadedInitValue as JsonTree)\n    : emptyInitValue\nconst initLogic: JsonLogicTree | undefined =\n  loadedInitLogic && Object.keys(loadedInitLogic).length > 0\n    ? (loadedInitLogic as JsonLogicTree)\n    : undefined\nlet initTree: ImmutableTree\ninitTree = checkTree(loadTree(initValue), loadedConfig)\n// initTree = checkTree(loadFromJsonLogic(initLogic, loadedConfig), loadedConfig); // <- this will work same\n\ninterface DemoQueryBuilderProps {}\n\ninterface DemoQueryBuilderState {\n  tree: ImmutableTree\n  config: Config\n  matchResults: {}[]\n}\n\nexport default class DemoQueryBuilder extends Component<\n  DemoQueryBuilderProps,\n  DemoQueryBuilderState\n> {\n  private immutableTree: ImmutableTree | undefined\n  private config: Config | undefined\n\n  constructor(props: DemoQueryBuilderProps) {\n    super(props)\n\n    this.state = {\n      tree: initTree,\n      config: loadedConfig,\n      matchResults: [],\n    }\n  }\n\n  componentDidMount() {\n    // @ts-ignore\n    window.addEventListener(\"update\", this.onConfigChanged)\n  }\n\n  componentWillUnmount() {\n    // @ts-ignore\n    window.removeEventListener(\"update\", this.onConfigChanged)\n  }\n\n  onConfigChanged = ({ detail: { config, _initTree, _initValue } }: CustomEvent) => {\n    this.setState({\n      config,\n    })\n    initTree = _initTree\n    initValue = _initValue\n  }\n\n  /**\n   * Test data against rule using jsonLogic\n   */\n  handleGenerateList = () => {\n    const { tree, config, matchResults } = this.state\n    const { logic, data, errors } = jsonLogicFormat(tree, config)\n    const results = exampleData.filter((r) => {\n      const isMatch = jsonLogic.apply(\n        logic, // Rule\n        r // Data\n      )\n      console.log(isMatch, logic, exampleData)\n      return isMatch\n    })\n    if (results.length > 0) message.success(\"Results found\")\n    else message.warn(\"No results found\")\n    this.setState({ matchResults: results })\n    console.log(results)\n  }\n\n  resetValue = () => {\n    this.setState({\n      tree: initTree,\n      matchResults: [],\n    })\n  }\n\n  clearValue = () => {\n    this.setState({\n      tree: loadTree(emptyInitValue),\n      matchResults: [],\n    })\n  }\n\n  onChange = (immutableTree: ImmutableTree, config: Config) => {\n    this.immutableTree = immutableTree\n    this.config = config\n    this.updateResult()\n    const jsonTree = getTree(immutableTree) //can be saved to backend\n  }\n\n  updateResult = throttle(() => {\n    this.setState({ tree: this.immutableTree!, config: this.config! })\n  }, 100)\n\n  render = () => (\n    <>\n      <Tabs defaultActiveKey=\"0\" type=\"card\">\n        <TabPane tab=\"QueryBuilder\" key=\"0\">\n          <Query\n            {...this.state.config}\n            value={this.state.tree}\n            onChange={this.onChange}\n            renderBuilder={(props: BuilderProps) => (\n              <div className=\"query-builder qb-lite\">\n                <Builder {...props} />\n                <div style={{ textAlign: \"right\", marginRight: 5, marginTop: 10 }}>\n                  <Button type=\"ghost\" onClick={this.resetValue} style={{ marginRight: 10 }}>\n                    Reset\n                  </Button>\n                  <Button type=\"ghost\" onClick={this.clearValue} style={{ marginRight: 10 }}>\n                    Clear\n                  </Button>\n                  {/*<Popconfirm\n                  title=\"Feature not implemented!\"\n                  okText=\"OK\"\n                  cancelText=\"Cancel\"\n                  style={{ marginRight: 5 }}>\n                  <Button type=\"primary\" onClick={this.handleGenerateList}>Generate List</Button>\n                </Popconfirm>*/}\n                  <Button\n                    type=\"primary\"\n                    onClick={this.handleGenerateList}\n                    style={{ marginRight: 5 }}>\n                    Generate List\n                  </Button>\n                </div>\n              </div>\n            )}\n          />\n        </TabPane>\n        {FormattedTabs(this.state)}\n      </Tabs>\n      <Table\n        dataSource={this.state.matchResults}\n        rowKey=\"id\"\n        columns={[\n          {\n            title: \"ID\",\n            dataIndex: \"id\",\n            key: \"id\",\n          },\n          {\n            title: \"Domains\",\n            dataIndex: \"Domains\",\n            key: \"Domains\",\n            render: (i) => `${i.Names.toString()}, ${i.Groups.toString()}`\n          },\n          {\n            title: \"Date of Birth\",\n            dataIndex: \"DateOfBirth\",\n            key: \"DateOfBirth\",\n            render: (i) => new Date(i).toLocaleDateString()\n          },\n          {\n            title: \"Gender\",\n            dataIndex: \"Gender\",\n            key: \"Gender\",\n            render: (i) => i === \"Male\" ? \"M\" : \"F\"\n          },\n          {\n            title: \"Attributors\",\n            dataIndex: \"Signal.Attributors\",\n            key: \"Attributors\",\n          },\n          {\n            title: \"Record Types\",\n            dataIndex: \"Signal.RecordTypes\",\n            key: \"RecordTypes\",\n          },\n          {\n            title: \"Seen\",\n            dataIndex: \"Signal.Seen.Days\",\n            key: \"Days\",\n          },\n        ]}\n      />\n    </>\n  )\n}\n\nfunction FormattedTabs({ tree: immutableTree, config }: { tree: ImmutableTree; config: Config }) {\n  const { logic, data, errors } = jsonLogicFormat(immutableTree, config)\n  return [\n    <TabPane tab=\"jsonLogic\" key=\"1\">\n      <CopyToClipboard\n        text={stringify(logic, undefined, 2)}\n        style={{ color: \"#1890ff\", cursor: \"pointer\" }}>\n        <span>Copy Rule</span>\n      </CopyToClipboard>\n      <span style={{ marginLeft: 20, marginRight: 20, color: \"#E0E0E0\" }}>|</span>\n      <CopyToClipboard\n        text={stringify(data, undefined, 2)}\n        style={{ color: \"#1890ff\", cursor: \"pointer\" }}>\n        <span>Copy Data</span>\n      </CopyToClipboard>\n      <span style={{ marginLeft: 20, marginRight: 20, color: \"#E0E0E0\" }}>|</span>\n      <a href=\"http://jsonlogic.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n        About jsonLogicFormat\n      </a>\n      <span style={{ marginLeft: 20, marginRight: 20, color: \"#E0E0E0\" }}>|</span>\n      <a\n        href=\"https://www.nuget.org/packages/JsonLogic.Net/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\">\n        JsonLogic.Net\n      </a>\n      {errors!.length > 0 && <pre style={preErrorStyle}>{stringify(errors, undefined, 2)}</pre>}\n      {!!logic && (\n        <>\n          <h2 style={{ marginTop: 20 }}>Rule</h2>\n          <pre style={preStyle}>{stringify(logic, undefined, 2)}</pre>\n          <h2>Data</h2>\n          <pre style={preStyle}>{stringify(data, undefined, 2)}</pre>\n        </>\n      )}\n    </TabPane>,\n    <TabPane tab=\"JSON (QB)\" key=\"7\">\n      <CopyToClipboard\n        text={stringify(queryBuilderFormat(immutableTree, config), undefined, 2)}\n        style={{ color: \"#1890ff\", cursor: \"pointer\" }}>\n        <span>Copy to clipboard</span>\n      </CopyToClipboard>\n      <pre style={preStyle}>\n        {stringify(queryBuilderFormat(immutableTree, config), undefined, 2)}\n      </pre>\n    </TabPane>,\n    <TabPane tab=\"Suppression\" key=\"8\">\n      <pre style={preStyle}>{stringify(suppressionFormat(immutableTree, config), undefined, 2)}</pre>\n    </TabPane>,\n    <TabPane tab=\"SQL\" key=\"4\">\n      <pre style={preStyle}>{stringify(sqlFormat(immutableTree, config), undefined, 2)}</pre>\n    </TabPane>,\n    <TabPane tab=\"MongoDB\" key=\"5\">\n      <pre style={preStyle}>{stringify(mongodbFormat(immutableTree, config), undefined, 2)}</pre>\n    </TabPane>,\n    <TabPane tab=\"Tree\" key=\"6\">\n      <CopyToClipboard\n        text={stringify(getTree(immutableTree), undefined, 2)}\n        style={{ color: \"#1890ff\", cursor: \"pointer\" }}>\n        <span>Copy to clipboard</span>\n      </CopyToClipboard>\n      <pre style={preStyle}>{stringify(getTree(immutableTree), undefined, 2)}</pre>\n    </TabPane>,\n    <TabPane tab=\"JS String\" key=\"2\">\n      <pre style={preStyle}>{stringify(queryString(immutableTree, config), undefined, 2)}</pre>\n    </TabPane>,\n    <TabPane tab=\"Human Readable(ish)\" key=\"3\">\n      <pre style={preStyle}>{queryString(immutableTree, config, true)}</pre>\n    </TabPane>,\n  ]\n}\n","import React from \"react\"\nimport DemoQueryBuilder from \"./AwesomeQueryBuilder/DemoQueryBuilder\"\nimport { Layout } from \"antd\"\n\nfunction App() {\n  return (\n    <Layout>\n      <Layout.Content style={{ backgroundColor: \"white\", padding: 20}}>\n        <DemoQueryBuilder />\n      </Layout.Content>\n    </Layout>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import red from \"@material-ui/core/colors/red\"\nimport { createMuiTheme } from \"@material-ui/core/styles\"\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n})\n\nexport default theme\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport { ThemeProvider } from \"@material-ui/core/styles\"\nimport theme from \"./theme\"\n\nReactDOM.render(\n  <>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}